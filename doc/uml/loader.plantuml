@startuml

class Resource<uniqueID> {
-friend: ResourceManager
-id: uniqueID
-owners: int
+Resource(id: uniqueID)
+id(): uniqueID
+owners(): int
+acquire()
+dispose()
}

class ResourceManager {
-resources: Resource[]
+create_and_insert(insertion: Strategy): Resource
+acquire(id: uniqueID) : Resource
+dispose(id: uniqueID)
-insert(resource: Resource)
}

ResourceManager --> "*" Resource: resources

class ILoader<Resource> {
+{abstract} loadFromFile(filename: String, resource: Resource)
+{abstract} saveToFile(resource: Resource, filename: String)
}

class LoaderManager<Resource1, Resource2, ..., ResourceN> {
-map<fileExtension, ILoader<Resource1>>
-map<fileExtension, ILoader<Resource2>>
-map<fileExtension, ILoader<ResourceN>>
+registerLoader(loader: ILoader<Resource>, fileExtension: String)
+loadFromFile(filename: String, resource: Resource)
+saveToFile(resource: Resource, filename: String)
+hasLoader(fileExtension: String) : bool
}

class ShapeFileLoader<Resource1=SimTaDynSheet> {
+loadFromFile(resource: SimTaDynSheet, filename: String)
+saveToFile(filename: String, resource: SimTaDynSheet)
}

class SimTaDynFileLoader<Resource2=SimTaDynMap> {
+loadFromFile(resource: SimTaDynMap, filename: String)
+saveToFile(filename: String, resource: SimTaDynMap)
}

class TextureFileLoader<Resource3=GLTexture> {
+loadFromFile(resource: GLTexture, filename: String)
+saveToFile(filename: String, resource: GLTexture)
}

class ForthFileLoader<Resource4=ForthFile> {
+loadFromFile(resource: ForthFile, filename: String)
+saveToFile(filename: String, resource: ForthFile)
}

LoaderManager --> "*" ILoader: map
ILoader .> Resource: load/save
ILoader <|-- SimTaDynFileLoader
ILoader <|-- ShapeFileLoader
ILoader <|-- TextureFileLoader
ILoader <|-- ForthFileLoader

Resource <|-- SimTaDynMap
Resource <|-- SimTaDynSheet
Resource <|-- GLTexture
Resource <|-- ForthFile

@enduml
