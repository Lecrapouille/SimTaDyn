./Common/Observer.hpp:103:        // FIXME ugly patch to avoid segfault loop iterator + erase
./Common/Observer.hpp:117:  std::vector<Observer<T, A> *> observers_; // FIXME containers
./Common/Observer.hpp:92:    observers_.clear();//FIXME
./main.cpp:16:  // FIXME: temporary, just for testing
./OpenGL/Textures.hpp:37:  // TODO: tester 2 chargement textures a la suite avec/sans echec
./OpenGL/Textures.hpp:77:  // FIXME: useful ? Never used !
./SimForth/Forth/Forth.cpp:153:              // FIXME: changer le message
./SimForth/Forth/Forth.cpp:457:// FIXME: convert char* --> string can be consumns lot of memory ?!
./SimForth/Forth/Forth.cpp:485:      // FIXME: le stream peut ne pas etre termine: attendre
./SimForth/Forth/Forth.cpp:486:      // FIXME: retourne ok si on lui donne une ligne vide dans un string
./SimForth/Forth/Forth.cpp:492:      // TODO: checker les piles
./SimForth/Forth/Forth.cpp:501:          // FIXME: the stream colum information is erroneous because
./SimForth/Forth/Forth.cpp:532:      abort(); // FIXME bad location
./SimForth/Forth/Forth.cpp:547:  // FIXME memoriser m_base
./SimForth/Forth/ForthDictionary.cpp:266:      // TODO: ajouter un param ou commence la sauvegarde dans le dico (ex: skip primitives)
./SimForth/Forth/ForthDictionary.cpp:628:  // FIXME: proteger en ecriture les anciens mots definis
./SimForth/Forth/ForthDictionary.cpp:629:  // FIXME: autoriser en lecture toutes les addr du dico
./SimForth/Forth/ForthDictionary.cpp:641:// FIXME: au lieu de addr >= &m_dictionary[NUM_PRIMITIVES]
./SimForth/Forth/ForthDictionary.cpp:710:  // FIXME Cell8 *const addr
./SimForth/Forth/ForthDictionary.hpp:97:  bool dump(std::string const& filename);// FIXME const;
./SimForth/Forth/ForthExceptions.hpp:126:  // FIXME SimForth::StackId au lieu de uint32_t
./SimForth/Forth/ForthHelper.hpp:141:// TODO: definir COLOR_IMMEDIATE YELLOW etc
./SimForth/Forth/ForthHelper.hpp:49:// FIXME: Maybe we can divide / 2 addresses because they are aligned.
./SimForth/Forth/ForthHelper.hpp:54:// FIXME: COMPIL_ASSERT_TIME((DICTIONARY_SIZE - 1U) <= CELL16_MAX_VALUE)
./SimForth/Forth/ForthPrimitives.cpp:642:  // TODO: Les ranger par ordre lexico ?
./SimForth/Forth/ForthPrimitives.cpp:643:  // FIXME: init m_last et m_here pour etre sur que le client ne
./SimForth/Forth/ForthPrimitives.hpp:139:// TODO: ASSERT_COMPILE_TIME(NUM_PRIMITIVES < sizeof (Cell16))
./SimGui/ForthEditor.cpp:129:  // TODO: save the historic buffer
./SimGui/ForthEditor.cpp:178:      // FIXME return not taken into account
./SimGui/ForthEditor.cpp:211:      // FIXME return not taken into account
./SimGui/ForthEditor.cpp:295:      // TODO: inserer nouveau mot dans tree
./SimGui/ForthEditor.cpp:34:    m_submenu[2].signal_activate().connect(sigc::mem_fun(*this, &ForthEditor::empty));// TODO
./SimGui/ForthEditor.cpp:99:    // FIXME: mettre les text view en read-only
./SimGui/ForthEditor.hpp:25:  Gtk::Notebook       m_res_notebooks; // FIXME: attention collision de noms TextEditor::m_notebook
./SimGui/ForthEditor.hpp:33:  //SimForth* m_forth; // FIXME: utile si on gere plusieurs cartes
./SimGui/MapEditor.cpp:15:    // TODO: New Map
./SimGui/MapEditor.cpp:24:    // TODO: Save (As) Map
./SimGui/MapEditor.cpp:68:      // FIXME return not taken into account
./SimGui/MapEditor.hpp:26:  RTreeNode* m_root; // FIXME: a attacher dans le graph
./SimGui/MapEditor.hpp:27:  SimTaDynGraph m_graph; // FIXME: a renommer en maps
./SimGui/Renderer.hpp:124:  // FIXME
./SimGui/Renderer.hpp:42:  void applyViewport(Camera2D& camera); // FIXME: pas de const a cause de getTransform
./SimGui/Renderer.hpp:47:  inline void applyViewport() // FIXME const;
./SimGui/Renderer.hpp:98:   * TODO: ajouter une texture comme fond d'ecran
./SimGui/SimTaDynWindow.cpp:194:// FIXME const Cell16 ForthToken)
./SimGui/SimTaDynWindow.cpp:196:// FIXME: si pile vide ou pas le bon nombre d'elements alors fenetre popup qui demande les param
./SimGui/SimTaDynWindow.cpp:197:// FIXME: ajouter le postip avec la definiton du mot "WORD ( n1 n2 -- n3 n4 )"
./SimGui/SimTaDynWindow.cpp:198:// FIXME ne pas autoriser a compiler
./SimGui/SimTaDynWindow.cpp:213:      // FIXME: exec1 est trop violent: ca efface le script en cours d'edition
./SimGui/SimTaDynWindow.cpp:39:  // * _Plugins: TBD: Let the user to add an menu calling it's on fprth scripts.
./SimGui/SimTaDynWindow.cpp:40:  // * _Help: TBD: add About/help/interactive tutorials
./SimGui/SimTaDynWindow.cpp:55:    // TODO: submenus Tuto, Help, Example, About
./SimGui/SimTaDynWindow.hpp:30:                                 const std::string &help);  // FIXME: Glib::ustring, const Cell16 Forthtoken);
./SimGui/SimTaDynWindow.hpp:51:  //GlDrawingArea m_drawing_area; // FIXME a cause d'un bug de gtkmm
./SimGui/SimTaDynWindow.hpp:53:  Renderer m_renderer;// FIXME a deplacer dans le contexte
./SimGui/TextEditor.cpp:295:// FIXME: never called
./SimGui/TextEditor.cpp:320:// TODO: for undo/redo actions
./SimGui/TextEditor.cpp:351:      // FIXME BUG si  m_filename == ""
./SimGui/TextEditor.cpp:381:// of the file. Note: we do not popup a dialog to ask if needed saving (TBD: bool save_before_otrunc)
./SimGui/TextEditor.cpp:526:  // FIXME: faire apparaitre avant de tuer la fenetre principale sinon le dialog peut etre cache par d'autres fentres
./SimGui/TextEditor.cpp:638:              std::cout << "Already opened\n"; // TODO statusbar
./SimGui/TextEditor.cpp:691:  // FIXME: mettre en gris le fond si le document est en read-only
./SimGui/TextEditor.cpp:703:      if (0 == doc->m_filename.compare("")) // FIXME || read-only(file)
./SimGui/TextEditor.hpp:131:// TBD: undo/redo
./SimGui/TextEditor.hpp:165:  // FIXME: mode interactif ==> ne pas sauvegarder
./SimMap/Cells/CellForth.hpp:62:  // FIXME: Unit test: tester eatString("")
./SimMap/Cells/SimTaDynArcs.hpp:24:  // FIXME utiliser des &
./SimMap/Cells/SimTaDynCells.hpp:121:  //std::vector<SimTaDynCell*> subjects_; // FIXME: trouver meilleur container
./SimMap/Cells/SimTaDynCells.hpp:273:   * Accessor: set a value instead of the code forth result.  FIXME:
./SimMap/Cells/SimTaDynGraphs.hpp:11:// FIXME: SimForth m_forth;
./SimMap/Cells/SimTaDynGraphs.hpp:59:    SimTaDynCell* node = new SimTaDynCell();// FIXMEnew SimTaDynNode();
./SimMap/Cells/SimTaDynGraphs.hpp:62:    node->moveToPosition(p);// FIXME pas optim
./SimMap/Cells/SimTaDynGraphs.hpp:73:    SimTaDynCell* node = new SimTaDynCell(name, code_forth, data);// FIXMEnew SimTaDynNode();
./SimMap/Cells/SimTaDynGraphs.hpp:7:// FIXME: changer nom ou alors SimTaDynMap = { SimTaDynGraph + RTree + Forth }
./SimMap/Loaders/IMapLoader.hpp:9:class SimTaDynMapLoaderException // TBD: : public Exception
./SimMap/Loaders/ShapeFile.cpp:258:  try // FIXME: comment faire undo en cas d'echec ?
./SimMap/Loaders/ShapeFile.hpp:68:  // FIXME: protected:
./SimMap/RTree/RTreeIndex.cpp:62:  if (IS_A_RTREE_LEAF(level)) // FIXME: faire if (is_leaf())
./SimMap/RTree/RTreeNode.cpp:8:  level = 0; // FIXME -1
